using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// <para>Controls the generation of sections.</para>
/// <para>A maze is generated by random sections.</para>
/// <para>NOTE: Not all tiles are being generated!</para>
/// <para>If you want to add them, see <see cref="MazeSection.CreateTile(byte, UnityEngine.Vector3)"></see></para>
/// </summary>
public class MazeGen : MonoBehaviour {

    /// <summary>
    /// Specify a level that should be generated. Name only.
    /// </summary>
    public string generateLevel = "";

    /// <summary>
    /// The width of the level (in case you want a larger one.
    /// </summary>
    public byte width = 7;

    /// <summary>
    /// Specify the minimum height of a generated section.
    /// </summary>
    public int minSectionHeight = 3;

    /// <summary>
    /// Specify the maximum height of a generated section.
    /// </summary>
    public int maxSectionHeight = 10;

    /// <summary>
    /// Specify the distance before the level should generate.
    /// </summary>
    private readonly int offset = 5;

    /// <summary>
    /// This keeps track of all generated sections.
    /// </summary>
    private List<MazeSection> sections = new();
   
    void Start() {

        // If the level is not specified, generate one initial section.
        // Else everything breaks.
        if (generateLevel != "") {
            MazeSection section = new(generateLevel, offset);
            sections.Add(section);
        } else {
            MazeSection sectionStart = new(width, 2, 0, offset);
            sections.Add(sectionStart);
        }
    }

    void Update() {

        if (generateLevel == "") {

            // If the last generated section is not 10 tiles away from the player,
            // generate more sections.
            if (sections[^1].GetLastTileYCoord() - Camera.main.transform.position.y < 10.0f) {
                NewSection();
            }

            // If the last generated section is 7 Tiles behind the player, unload it.
            if (Camera.main.transform.position.y - sections[0].GetLastTileYCoord() > 7.0f) {
                RemoveSection();
            }
        }
    }

    /// <summary>
    /// Generates a new section with random parameters.
    /// </summary>
    private void NewSection() {

        // section[^1].getLastTileCoord() is offset,
        // as the sections have to generate on top of another.
        MazeSection section = new(width,
                                    Random.Range(minSectionHeight, maxSectionHeight),
                                    (short)Random.Range(0, 3),
                                    sections[^1].GetLastTileYCoord());
        
        // Add to list of sections.
        sections.Add(section);

        // Always add a small gap between each section, so that the player not only
        // has more options, but also make sure that there is not a generation where
        // the player could get stuck.
        MazeSection sectionEmpty = new(width,
                                    2,
                                    0,
                                    sections[^1].GetLastTileYCoord());
        sections.Add(sectionEmpty);
    }

    /// <summary>
    /// Removes all Tile Gameobjects and untrack them from the sections list.
    /// </summary>
    private void RemoveSection() {
        sections[0].DestroySection();
        sections.RemoveAt(0);
    }



}

